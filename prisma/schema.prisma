// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  products Product[]
  orders   Order[]
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  images      Image[]
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id])
  price       Float
  description String? // Optional description
  orders      OrderItem[]

}

model Image {
  id         String   @id @default(auto())  @map("_id") @db.ObjectId
  secureUrl  String
  publicUrl  String
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
}


model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  createdAt DateTime    @default(now())
  payment   Payment?
} 

model OrderItem{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id       String     @id @default(auto())    @map("_id")   @db.ObjectId
  orderId  String     @db.ObjectId @unique
  order     Order     @relation(fields: [orderId], references: [id])
  amount    Float
  status    PaymentStatus  @default(PENDING)  
  createdAt DateTime  @default(now())


}